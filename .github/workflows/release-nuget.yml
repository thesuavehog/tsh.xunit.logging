name: Release

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]
  workflow_dispatch:
  pull_request_target:
    branches: [ release ]

env:
  # Typically: Debug | Release - this value must be setup in the .csproj file that is being built
  BUILD_CONFIGURATION: Release
  # Typically: '-beta' for Debug (non-release) builds, '' for Release
  PACKAGE_VERSION_SUFFIX: ""
  PROJECT_BIN: tsh.Xunit.Logging/bin
  PROJECT_MAIN: tsh.Xunit.Logging/tsh.Xunit.Logging.csproj
  PROJECT_URL: https://github.com/${{ github.repository }}
  REPO_URL: https://github.com/${{ github.repository }}.git
  REPO_OWNER: ${{ github.repository_owner }}
  NUGET_SOURCE: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
  # See: https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  
jobs:
  
  env-setup:
    runs-on: windows-latest
    steps:
      - name: Setup .NET Core v3.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
          
  build:
    needs: [env-setup]
    runs-on: windows-latest
    steps:
      
    - name: Checkout
      uses: actions/checkout@v2.3.2

    - name: Update Project Metadata
      run: |
        echo "Project File: ./$($env:PROJECT_MAIN)"
        [xml]$xml = Get-Content ./$env:PROJECT_MAIN

        # Set Company to REPOR_OWNER so that forks have a unique Company name
        $xml.SelectNodes("//Project/PropertyGroup/Company") | % { $_."#text" = $env:REPO_OWNER }
        echo "Company: $($xml.SelectNodes("//Project/PropertyGroup/Company")."#text")"

        #
        # Set Repository Url so that source debugging points back to the right git repo
        $xml.SelectNodes("//Project/PropertyGroup/RepositoryUrl") | % { $_."#text" = $env:REPO_URL }
        echo "RepositoryUrl: $($xml.SelectNodes("//Project/PropertyGroup/RepositoryUrl")."#text")"

        #
        # Set Project Url so that it's clear in NuGet properties this is either the root or a fork
        $xml.SelectNodes("//Project/PropertyGroup/PackageProjectUrl") | % { $_."#text" = $env:PROJECT_URL }
        echo "PackageProjectUrl: $($xml.SelectNodes("//Project/PropertyGroup/PackageProjectUrl")."#text")"

        #
        # Append the build number to the Assembly Version
        if (-not $xml.Project.PropertyGroup[0].Version -or $xml.Project.PropertyGroup[0].Version -eq "") {
            Write-Error "Missing Version Number from Project/PropertyGroup/Version"
            exit
        }
        $version = "$($xml.Project.PropertyGroup[0].Version).$($env:GITHUB_RUN_NUMBER)"
        if (-not $version -or $version -eq '' -or $version.EndsWith('.')) {
            Write-Error "Missing or Improper Version Number"
            Write-Error "   Project File: $($xml.Project.PropertyGroup[0].Version)"
            Write-Error "   GITHUB_RUN_NUMBER: $($env:GITHUB_RUN_NUMBER)"
            exit
        }

        #
        # Assembly Version (x.x.x.x)
        if (-not $xml.Project.PropertyGroup[0].AssemblyVersion -or $xml.Project.PropertyGroup[0].AssemblyVersion -eq "") {
            $versionNode = $xml.SelectNodes('//Project/PropertyGroup')[0].AppendChild($xml.CreateElement("AssemblyVersion"))
        }
        $xml.Project.PropertyGroup[0].AssemblyVersion = $version
        echo "AssemblyVersion: $($xml.Project.PropertyGroup[0].AssemblyVersion)"

        if (-not $xml.Project.PropertyGroup[0].AssemblyFileVersion -or $xml.Project.PropertyGroup[0].AssemblyFileVersion -eq "") {
            $versionNode = $xml.SelectNodes('//Project/PropertyGroup')[0].AppendChild($xml.CreateElement("AssemblyFileVersion"))
        }
        $xml.Project.PropertyGroup[0].AssemblyFileVersion = $version
        echo "AssemblyFileVersion: $($xml.Project.PropertyGroup[0].AssemblyFileVersion)"

        #
        # Packaging (NuGet) Version (x.x.x.x[-beta])
        $xml.Project.PropertyGroup[0].Version = "$($version)$($env:PACKAGE_VERSION_SUFFIX)"
        echo "Version: $($xml.Project.PropertyGroup[0].Version)"

        if (-not $xml.Project.PropertyGroup[0].PackageVersion -or $xml.Project.PropertyGroup[0].PackageVersion -eq "") {
            $versionNode = $xml.SelectNodes('//Project/PropertyGroup')[0].AppendChild($xml.CreateElement("PackageVersion"))
        }
        $xml.Project.PropertyGroup[0].PackageVersion = "$($version)$($env:PACKAGE_VERSION_SUFFIX)"
        echo "PackageVersion: $($xml.Project.PropertyGroup[0].PackageVersion)"
        
        # 
        # Save Updated .csproj File
        $xml.Save($env:PROJECT_MAIN)
        
    - name: Extract Project Metadata
      run: |
        echo "Project File: ./$($env:PROJECT_MAIN)"
        [xml]$xml = Get-Content ./$env:PROJECT_MAIN
        $val = $xml.Project.PropertyGroup[0].PackageId
        echo "ASSEMBLY_NAME: $($val)"
        echo "::set-env name=ASSEMBLY_NAME::$($val)"
        $val = $xml.Project.PropertyGroup[0].Version
        echo "NUGET_VERSION: $($val)"
        echo "::set-env name=NUGET_VERSION::$($val)"
        $val = "$($env:GITHUB_REPOSITORY)".Split('/',2)[1]
        echo "::set-env name=PROJECT_NAME::$($val)"
        
    - name: Install dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration $env:BUILD_CONFIGURATION --no-restore
    
    #- name: Test
    #  run: dotnet test --no-restore --verbosity normal
    
    - name: Upload Build Output Artifact
      uses: actions/upload-artifact@v2.1.3
      with:
        # Artifact name
        name: ${{ env.PROJECT_NAME }}.${{ env.BUILD_CONFIGURATION }}
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{ env.PROJECT_BIN }}/${{ env.BUILD_CONFIGURATION }}/netstandard2.1/**/*
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error
    
    - name: Package
      run: dotnet pack --include-source --include-symbols -p:SymbolPackageFormat=snupkg --configuration $env:BUILD_CONFIGURATION $env:PROJECT_MAIN --verbosity normal
    
    - name: Upload NuGet Package Artifact
      uses: actions/upload-artifact@v2.1.3
      with:
        # Artifact name
        name: ${{ env.PROJECT_NAME }}.${{ env.BUILD_CONFIGURATION }}.NuGet
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{ env.PROJECT_BIN }}/${{ env.BUILD_CONFIGURATION }}/*.nupkg
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error
          
    - name: Publish to Github Packages
      # NOTE: *.nupkg does not work when pushing
      run: |
        dotnet nuget add source ${{ env.NUGET_SOURCE }} -n github -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
        dotnet nuget push ${{ env.PROJECT_BIN }}/${{ env.BUILD_CONFIGURATION }}/${{ env.ASSEMBLY_NAME }}.${{ env.NUGET_VERSION }}.nupkg --source "github" --skip-duplicate
          
    - name: Publish NuGet.org
      # You may pin to the exact commit or the version.
      # uses: brandedoutcast/publish-nuget@c12b8546b67672ee38ac87bea491ac94a587f7cc
      uses: brandedoutcast/publish-nuget@v2.5.5
      with:
        # Filepath of the project to be packaged, relative to root of repository
        PROJECT_FILE_PATH: ${{ env.PROJECT_MAIN }}
        # NuGet package id, used for version detection & defaults to project name
        PACKAGE_NAME: tsh.xUnit.Logging
        # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH
        # VERSION_FILE_PATH: # optional
        # Regex pattern to extract version info in a capturing group
        # VERSION_REGEX: # optional, default is ^\s*<Version>(.*)<\/Version>\s*$
        # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
        # VERSION_STATIC: # optional
        # Flag to toggle git tagging, enabled by default
        # TAG_COMMIT: # optional, default is true
        # Format of the git tag, [*] gets replaced with actual version
        # TAG_FORMAT: # optional, default is v*
        # API key to authenticate with NuGet server
        NUGET_KEY: ${{ secrets.NUGET_ORG_APIKEY }}
        # NuGet server uri hosting the packages, defaults to https://api.nuget.org
        # NUGET_SOURCE: # optional, default is https://api.nuget.org
        # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
        INCLUDE_SYMBOLS: true
