<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XUnitLogging</name>
    </assembly>
    <members>
        <member name="T:tsh.XUnit.Logging.XUnitLogger">
            <summary>
            Implementation of <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface to wrap a <see cref="T:Xunit.Abstractions.ITestOutputHelper"/> 
            to capture logging output from implentations being tested which require ILogger interfaces 
            to write to.
            </summary>
            <remarks>
            Typically <see cref="T:tsh.XUnit.Logging.XUnitLogger"/> is not instantiated directly, but an <see cref="T:tsh.XUnit.Logging.XUnitLoggerProvider"/> 
            is created and used with an <see cref="!:ILoggingBuilder"/> inside a ConfigureServices call.
            </remarks>
        </member>
        <member name="F:tsh.XUnit.Logging.XUnitLogger.DefaultLogLevel">
            <summary>
            If no specific <see cref="P:tsh.XUnit.Logging.XUnitLogger.LogLevel"/> is provided when creating this 
            logger, this is the default log level to use.
            </summary>
        </member>
        <member name="F:tsh.XUnit.Logging.XUnitLogger.DefaultLogFormat">
            <summary>
            If not specific <see cref="P:tsh.XUnit.Logging.XUnitLogger.OutputFormat"/> is provided when creating this
            logger, this is the default log format to use.
            </summary>
        </member>
        <member name="P:tsh.XUnit.Logging.XUnitLogger.Output">
            <summary>
            Log messages sent to this ILogger will be output to this <see cref="T:Xunit.Abstractions.ITestOutputHelper"/>
            </summary>
            <remarks>
            This is immutable once the logger is created.
            </remarks>
        </member>
        <member name="P:tsh.XUnit.Logging.XUnitLogger.CategoryName">
            <summary>
            The name of this logger which will be included in the output messages.
            </summary>
        </member>
        <member name="P:tsh.XUnit.Logging.XUnitLogger.LogLevel">
            <summary>
            Log messages at or above this <see cref="P:tsh.XUnit.Logging.XUnitLogger.LogLevel"/> will be output by this logger
            </summary>
        </member>
        <member name="P:tsh.XUnit.Logging.XUnitLogger.OutputFormat">
            <summary>
            Control the format of the output - mostly to support limiting the newlines 
            inserted or to output the raw log message without manipulation (i.e. if you are 
            already using a structured logging solution)
            </summary>
        </member>
        <member name="P:tsh.XUnit.Logging.XUnitLogger.ScopeProvider">
            <summary>
            If scopes are enabled, the <see cref="T:Microsoft.Extensions.Logging.IExternalScopeProvider"/> used to create scopes for this logger.
            </summary>
            <remarks>
            This is exposed only to facilitate implementations extending this class access.
            </remarks>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLogger.CreateLogger(Xunit.Abstractions.ITestOutputHelper,System.String,System.Nullable{Microsoft.Extensions.Logging.LogLevel},System.Nullable{tsh.XUnit.Logging.XUnitLogger.LogFormat},Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <summary>
            Create a new <see cref="T:tsh.XUnit.Logging.XUnitLogger"/> instance.
            </summary>
            <param name="output"></param>
            <param name="name"></param>
            <param name="level"></param>
            <param name="outputFormat"></param>
            <param name="scopeProvider"></param>
            <returns></returns>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLogger.CreateLogger``1(Xunit.Abstractions.ITestOutputHelper,System.String,System.Nullable{Microsoft.Extensions.Logging.LogLevel},System.Nullable{tsh.XUnit.Logging.XUnitLogger.LogFormat},Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <summary>
            Create a new <see cref="T:tsh.XUnit.Logging.XUnitLogger`1"/> instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="output"></param>
            <param name="name"></param>
            <param name="level"></param>
            <param name="outputFormat"></param>
            <param name="scopeProvider"></param>
            <returns></returns>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLogger.#ctor(Xunit.Abstractions.ITestOutputHelper)">
            <summary>
            Minimal constructor for the only REQUIRED parameter.
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLogger.#ctor(Xunit.Abstractions.ITestOutputHelper,System.String,System.Nullable{Microsoft.Extensions.Logging.LogLevel},System.Nullable{tsh.XUnit.Logging.XUnitLogger.LogFormat},Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <summary>
            Create a new <see cref="T:tsh.XUnit.Logging.XUnitLogger"/> instance with the given paramters.<br/>
            This constructor is intended for subclasse to ease setting the read-only properties.
            </summary>
            <param name="output"></param>
            <param name="categoryName"></param>
            <param name="level"></param>
            <param name="outputFormat"></param>
            <param name="scopeProvider"></param>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Checks if the given logLevel is enabled.
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
            <remarks>see: <see cref="M:Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)"/></remarks>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLogger.BeginScope``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="state"></param>
            <returns></returns>
            <remarks>See: <see cref="M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)"/></remarks>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            To output log messages un modified from the source log call, set <see cref="P:tsh.XUnit.Logging.XUnitLogger.OutputFormat"/> to <see cref="F:tsh.XUnit.Logging.XUnitLogger.LogFormat.Unformatted"/>.
            This is useful, for example, when you are outputting JSON logs from a library that pre-formats the output.<br/>
            
            <example>Default Log Output Format:<br/>
            <code>
            {LogLevel}: [{CategoryName}]<br/> 
                        {formatter}<br/>
            {exception}<br/>
                        => {scope} 
            </code>
            </example>
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
            <remarks>
            See: <see cref="M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})"/>
            </remarks>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLogger.GetLogLevelString(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Convert a <see cref="P:tsh.XUnit.Logging.XUnitLogger.LogLevel"/> into a 4 char string for logging output.
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="T:tsh.XUnit.Logging.XUnitLogger`1">
            <summary>
            Generic version of <see cref="T:tsh.XUnit.Logging.XUnitLogger"/> which uses the <see cref="P:System.Type.FullName"/> of T 
            as the logger category (if none is otherwise provided in the constructor).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLogger`1.#ctor(Xunit.Abstractions.ITestOutputHelper,System.String,System.Nullable{Microsoft.Extensions.Logging.LogLevel},System.Nullable{tsh.XUnit.Logging.XUnitLogger.LogFormat},Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="name">Normally, not used. Will overrise the <see cref="P:System.Type.FullName"/> of T if provided.</param>
            <param name="level"></param>
            <param name="outputFormat"></param>
            <param name="scopeProvider"></param>
        </member>
        <member name="T:tsh.XUnit.Logging.XUnitLoggerProvider">
            <summary>
            Implementation of <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/> which can be added to any 
            <see cref="!:ILoggingBuilder"/> to capture log output and direct it to the 
            provided <see cref="T:Xunit.Abstractions.ITestOutputHelper"/>.
            </summary>
        </member>
        <member name="P:tsh.XUnit.Logging.XUnitLoggerProvider.LogLevel">
            <summary>
            LogLevel to set for all <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instances created by this provider.
            </summary>
        </member>
        <member name="P:tsh.XUnit.Logging.XUnitLoggerProvider.OutputFormat">
            <summary>
            Format to set for all <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instances created by this provider.
            </summary>
        </member>
        <member name="P:tsh.XUnit.Logging.XUnitLoggerProvider.Output">
            <summary>
            The logging sink where all log messages sent to <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instances created 
            by this provider will be sent. 
            </summary>
            <remarks>
            The destination (<see cref="T:Xunit.Abstractions.ITestOutputHelper"/>) cannot be changed after this provider is 
            instantiated. To create <see cref="T:Microsoft.Extensions.Logging.ILogger"/>s for a different <see cref="T:Xunit.Abstractions.ITestOutputHelper"/> 
            destination, create a new <see cref="T:tsh.XUnit.Logging.XUnitLoggerProvider"/>
            </remarks>
        </member>
        <member name="F:tsh.XUnit.Logging.XUnitLoggerProvider._loggers">
            <summary>
            Keep track of ILogger instances created by this provider and re-use them when there are multiple 
            calls for the same named ILogger to avoid creating duplicate ILogger instances.
            </summary>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLoggerProvider.#ctor(Xunit.Abstractions.ITestOutputHelper,System.Nullable{Microsoft.Extensions.Logging.LogLevel},System.Nullable{tsh.XUnit.Logging.XUnitLogger.LogFormat})">
            <summary>
            Create a new <see cref="T:tsh.XUnit.Logging.XUnitLoggerProvider"/> which will build <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instances directing 
            output to <paramref name="output"/> for log messages at or above <paramref name="level"/>
            </summary>
            <param name="output">The destination for log messages written to <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instances created by this provider</param>
            <param name="level">The minimum log level of logging messages to output by <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instances created by this provider</param>
            <param name="outputFormat"></param>
            <remarks>
            If <paramref name="level"/> is not provided, or null, the <see cref="F:tsh.XUnit.Logging.XUnitLogger.DefaultLogLevel"/> will be used.
            </remarks>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLoggerProvider.#ctor(Xunit.Abstractions.ITestOutputHelper,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Create a new <see cref="T:tsh.XUnit.Logging.XUnitLoggerProvider"/> which will build <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instances directing 
            output to <paramref name="output"/> for log messages.<br/>
            The <see cref="P:tsh.XUnit.Logging.XUnitLoggerProvider.LogLevel"/> and <see cref="P:tsh.XUnit.Logging.XUnitLoggerProvider.OutputFormat"/> will be read from the provided <paramref name="configuration"/>.
            </summary>
            <param name="output">The destination for log messages written to <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instances created by this provider</param>
            <param name="configuration">IConfiguration to read the log level and log format from </param>
            <remarks>
            LogLevel Search Order:  "LogLevel:Xunit:LogLevel", "Xunit:LogLevel", "Logging:Xunit", "Logging:Default"<br/>
            LogFormat Search Order: "Xunit:LogFormat", "LogLevel:Xunit:LogFormat"
            </remarks>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLoggerProvider.CreateLogger(System.String)">
            <summary>
            Obtain an <see cref="T:Microsoft.Extensions.Logging.ILogger"/> using the provided name.
            </summary>
            <param name="categoryName"></param>
            <returns></returns>
        </member>
        <member name="M:tsh.XUnit.Logging.XUnitLoggerProvider.Dispose">
            <summary>
            Clear all the ILoggers previously created by this provider.
            <seealso cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
    </members>
</doc>
